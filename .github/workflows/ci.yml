name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    environment: STORACHA_KEY
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run main test suite
        run: npm test
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    environment: STORACHA_KEY
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  car-backup-tests:
    name: CAR Backup Tests
    runs-on: ubuntu-latest
    environment: STORACHA_KEY
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run CAR backup tests
        run: npm run test:car-backup
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  p256-ucan-tests:
    name: P256 UCAN Security Tests
    runs-on: ubuntu-latest
    environment: STORACHA_KEY
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run P256 UCAN tests
        run: npm run test:p256-ucan
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, car-backup-tests, p256-ucan-tests]
    if: always()
    steps:
      - name: Notify Success
        if: needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.car-backup-tests.result == 'success' && needs.p256-ucan-tests.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "🎉 OrbitDB Storacha Bridge is working correctly"

      - name: Notify Failure
        if: needs.lint.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.car-backup-tests.result == 'failure' || needs.p256-ucan-tests.result == 'failure'
        run: |
          echo "❌ Some tests failed"
          echo "🔍 Please check the logs above for details"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "CAR Backup Tests: ${{ needs.car-backup-tests.result }}"
          echo "P256 UCAN Tests: ${{ needs.p256-ucan-tests.result }}"
          exit 1
