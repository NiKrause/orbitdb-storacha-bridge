name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format -- --check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-suite: [integration, backup, restore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run specific test suite
        run: npm run test:${{ matrix.test-suite }}
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  test-all:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run all tests with verbose output
        run: npm run test:verbose
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  examples:
    name: Run Examples
    runs-on: ubuntu-latest
    needs: [lint, test-all]
    strategy:
      matrix:
        example: [demo, backup-demo, restore-demo]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for examples
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run example - ${{ matrix.example }}
        run: npm run ${{ matrix.example }}
        timeout-minutes: 10

      - name: Clean up example artifacts
        if: always()
        run: npm run clean

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated packages
        run: npm outdated || true

  build-validation:
    name: Validate Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate package.json
        run: npm run lint

      - name: Check if all dependencies can be resolved
        run: node -e "console.log('All dependencies resolved successfully')"

  cross-platform:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['22', '23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        shell: bash
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run integration tests only
        run: npm run test:integration
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up
        if: always()
        run: npm run clean

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run tests with coverage
        run: npm test -- --coverage
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Clean up
        if: always()
        run: npm run clean

  integration-full:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [test-all, examples]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      - name: Run full demo
        run: npm run demo
        timeout-minutes: 15

      - name: Verify backup and restore cycle
        run: |
          npm run backup-demo
          npm run restore-demo
        timeout-minutes: 10

      - name: Clean up
        if: always()
        run: npm run clean

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-all, examples, security, cross-platform, integration-full]
    if: always()
    steps:
      - name: Notify Success
        if: needs.test-all.result == 'success' && needs.examples.result == 'success'
        run: |
          echo "‚úÖ All tests and examples passed successfully!"
          echo "üéâ OrbitDB Storacha Bridge is working correctly"

      - name: Notify Failure
        if: needs.test-all.result == 'failure' || needs.examples.result == 'failure'
        run: |
          echo "‚ùå Some tests or examples failed"
          echo "üîç Please check the logs above for details"
          exit 1
