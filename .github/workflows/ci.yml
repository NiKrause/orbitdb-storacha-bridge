name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format -- --check

  test:
    name: Run Full Backup & Restore Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # - name: Install W3 CLI
      #   run: npm install -g @web3-storage/w3cli

      - name: Create .env file for tests
        run: |
          echo "STORACHA_KEY=${{ secrets.STORACHA_KEY }}" >> .env
          echo "STORACHA_PROOF=${{ secrets.STORACHA_PROOF }}" >> .env

      # - name: Run W3 CLI Integration Test
      #   run: npm run test:w3-cli
      #   env:
      #     NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Run Integration Test
        run: npm run test:integration
        env:
          NODE_OPTIONS: '--experimental-vm-modules --no-warnings'

      - name: Clean up test artifacts
        if: always()
        run: npm run clean

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [lint, test]
    # Only publish on pushes to main/master branch (not PRs or scheduled runs)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Check if version has been updated
        id: check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version already exists on npm
          if npm view orbitdb-storacha-bridge@$CURRENT_VERSION version 2>/dev/null; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION already exists on npm"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION is new, ready to publish"
          fi

      - name: Publish to NPM
        if: steps.check.outputs.version_exists == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag
        if: steps.check.outputs.version_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag v${{ steps.check.outputs.current_version }}
          git push origin v${{ steps.check.outputs.current_version }}

